-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )

import Language.ISOZ.Lexer.ISOZLexer 
import Language.ISOZ.Parser.ISOZParser 
import Language.ISOZ.Utils.PrintIsoz (Print, printTree)
import Language.ISOZ.Common.AbsIsoz as AbsIsoz
import Language.ISOZ.Parser.SynTransformerOne (synTraverse1Tree, SynTraverse1)
import Language.ISOZ.Parser.SynTransformExpr (synTraverseExprTree, SynTraverseExpr)

-- a pretty show 
import Text.Show.Pretty

type ParseFun a = [Token] -> Alex a

myLLexer = myLexer

type Verbosity = Int

printToks :: Either String [Token] -> String 
printToks (Left str) = ("Error: " ++ str)
printToks (Right toks) = "-------------------------------- Start ----------------------------------\n" ++ pprt toks 
    where pprt [] = "-------------------------------- End ----------------------------------" 
          pprt (x:xs) = (show x) ++ "\n" ++ (pprt xs)

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()

runFile :: (Print a, Show a, SynTraverse1 a, SynTraverseExpr a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run :: (Print a, Show a, SynTraverse1 a, SynTraverseExpr a) => Verbosity -> ParseFun a -> String -> IO ()
run v p s = let ts = myLLexer s in case ts of
           Left er   -> do putStrLn "\nParse              Failed...\n"
                           putStrV v "Tokens:"
                           putStrLn er
                           exitFailure
           Right tos -> let pret = p tos 
                        in case unAlex pret (AlexState {alex_pos = alexStartPos,
                                                        alex_inp = s,
                                                        alex_chr = '\n',
                                                        alex_bytes = [],
                                                        alex_ust = alexInitUserState,
                                                        alex_scd = 0}) of 
                                    Left r -> do putStrLn "\nParse              Failed...\n"
                                                 putStrV v "Tokens:"
--                                                 putStrV v $ show ts
                                                 putStrV v $ (printToks ts) 
                                                 putStrLn "\n" 
                                                 putStrLn r
                                                 exitFailure
                                    Right (_, tree) -> do putStrLn "\nParse Successful!" 
                                                          putStrV v "Tokens:"
                                                          putStrV v $ show ts
                                                          putStrV v $ (printToks ts)
                                                          showTree v tree 
                                                          exitSuccess


showTree :: (Show a, Print a, SynTraverse1 a, SynTraverseExpr a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Concrete Syntax Tree]\n\n" ++ ppShow tree
      putStrV v $ "\n[Syntactically Transformed tree (Step 1)]\n\n" ++ ppShow tree1 
      putStrV v $ "\n[Expression Transformed tree (Step 2)]\n\n" ++ ppShow tree2 
      putStrV v $ "\n[Linearized tree 1]\n\n" ++ printTree tree1
      putStrV v $ "\n[Linearized Expression Transformed tree 2]\n\n"
      case (tree2) of
        Left err -> putStrV v $ err
        Right t ->  putStrV v $ (printTree t)
  where tree1 = (synTraverse1Tree tree)
        tree2 = (synTraverseExprTree tree1)

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> hGetContents stdin >>= run 2 pSpecification
    "-s":fs -> mapM_ (runFile 0 pSpecification) fs
    fs -> mapM_ (runFile 2 pSpecification) fs

